import unittest
from io import StringIO
from fault_section import SheetFault, FaultSubSection, FaultSubSectionFactory
import csv

# fixtures
# noqa
# tile_param_csv = """along_strike_index,down_dip_index,lon1(deg),lat1(deg),lon2(deg),lat2(deg),dip (deg),top_depth (km),bottom_depth (km)
# 0,0,172.55049384268952,-43.66066194689264,172.44173203440846,-43.70398277095125,17.190332526361505,27.777180834317445,30.732649458700852
# 0,1,172.47296534458786,-43.6059065011278,172.35583940675505,-43.63534622846773,9.730595837337948,26.05032447851844,27.740481671477475
# 0,2,172.3391136381901,-43.53988717373262,172.4293503838267,-43.6015505895119,3.354830653187863,25.828426371737926,26.413620262173023
# 0,3,172.33001404532172,-43.520284730458144,172.28135753916627,-43.60307961223907,6.915901943781332,26.109450377717053,27.313574031156808
# 0,4,172.24268881162706,-43.47309899751564,172.17280352691546,-43.54739397531888,10.687797287418245,27.331460311201145,29.186033678675194
# 0,5,172.15289485360287,-43.42000512957658,172.07440468929877,-43.48955601373996,12.304833921583548,29.237078193834066,31.3682063613206
# 0,6,172.06300915691102,-43.36651675667496,171.97739225607305,-43.43139615156615,11.705865896797393,31.356078313909183,33.38495377744904
# 1,0,172.64501897152118,-43.59954874059301,172.53382327497368,-43.639313969118454,16.25555174108543,26.795272837432112,29.5944932160583
# 1,1,172.5637722710231,-43.543754598669,172.44640809376534,-43.572430195437214,8.880200993106621,25.34360676778234,26.887296565515864
# 1,2,172.44220596867652,-43.477837653859055,172.51851406753119,-43.5487115943056,2.905294291172359,25.318439393304615,25.82529163668574
# 1,3,172.42154835679807,-43.46135549825015,172.3664181339217,-43.54195812144478,7.037773144797519,25.69814411810224,26.923380803625093
# 1,4,172.33277139382653,-43.4119492515352,172.2610776847743,-43.48528999219563,10.847676605186154,26.94588539932208,28.82787164265644
# 1,5,172.242692657873,-43.35738849281896,172.16494794940513,-43.4273373346978,12.61516331423042,28.893903935266238,31.077919034165205
# 1,6,172.15302850394602,-43.30235827895629,172.0707126372049,-43.369417424178536,12.192769409770285,31.15628950326498,33.268303975531644
# 1,7,172.06310241360606,-43.25052114911484,171.97193373467607,-43.311105498077104,9.619402294399764,33.35437895826026,35.02540524676675
# 1,8,171.9677832362838,-43.20879502529762,171.85744119000216,-43.248754914020964,6.463749772675945,34.953611461391944,36.07935718466277
# 1,9,171.8706056648584,-43.1588406763909,171.75280548116186,-43.18478062962037,8.163253506464207,35.794783448666585,37.214724589681175
# 1,10,171.78514584969986,-43.09006233469788,171.67422519796153,-43.128820064269775,15.553386466049785,36.85596818020717,39.53732959531796
# 1,11,171.70018636063736,-43.02293702113887,171.59774188193896,-43.07254995279954,27.061683967322573,39.26701654116051,43.81651137795057
# 1,12,171.6216914119655,-42.96704242849143,171.52273163875773,-43.020235158453694,36.49785918086159,43.880510447093855,49.82843795462334
# 2,0,172.73940645104628,-43.53756452937407,172.62426912606702,-43.57066107147479,14.928246050752739,26.134533475945258,28.71062519928138
# 2,1,172.66171469659787,-43.484309065661236,172.54028415216268,-43.50139779519755,7.976508895510293,24.829958113064578,26.217628935260592
# 2,2,172.5480471021392,-43.41734130837748,172.60257122940806,-43.498150093509956,3.5127525175150494,24.82039956085725,25.433106523808725
# 2,3,172.50885961053964,-43.39625111045,172.4570818809257,-43.478006540612846,7.576237730260184,25.25189169403127,26.570344616308496
# """

tile_param_csv = """along_strike_index,down_dip_index,lon1(deg),lat1(deg),lon2(deg),lat2(deg),dip (deg),top_depth (km),bottom_depth (km),tile_geometry
0,0,172.55049384268952,-43.66066194689264,172.44173203440846,-43.70398277095125,17.190332526361505,27.777180834317445,30.732649458700852,"POLYGON Z ((1568403.689911056 5157370.647731881 -30732.64945870085, 1563756.460558967 5165717.411449596 -27777.18083431745, 1555019.396855652 5160852.874694238 -27777.18083431745, 1559666.626207742 5152506.110976523 -30732.64945870085, 1568403.689911056 5157370.647731881 -30732.64945870085))"
0,1,172.47296534458786,-43.6059065011278,172.35583940675505,-43.63534622846773,9.730595837337948,26.05032447851844,27.740481671477475,"POLYGON Z ((1560754.988229565 5162470.378958552 -27740.48167147748, 1557466.753940023 5171761.820392483 -26050.32447851844, 1548039.688669806 5168425.588927031 -26050.32447851844, 1551327.922959348 5159134.147493101 -27740.48167147748, 1560754.988229565 5162470.378958552 -27740.48167147748))"
0,2,172.3391136381901,-43.53988717373262,172.4293503838267,-43.6015505895119,3.354830653187863,25.828426371737926,26.413620262173023,"POLYGON Z ((1547160.867150199 5164897.547908339 -26413.62026217302, 1553943.569675008 5172222.334224031 -25828.42637173793, 1546606.209119977 5179016.680409315 -25828.42637173793, 1539823.506595168 5171691.894093622 -26413.62026217302, 1547160.867150199 5164897.547908339 -26413.62026217302))"
0,3,172.33001404532172,-43.520284730458144,172.28135753916627,-43.60307961223907,6.915901943781332,26.109450377717053,27.313574031156808,"POLYGON Z ((1532839.842536985 5175784.620860833 -27313.57403115681, 1542000.689311197 5171959.836866063 -26109.45037771705, 1545853.50655541 5181187.826857534 -26109.45037771705, 1536692.659781198 5185012.610852304 -27313.57403115681, 1532839.842536985 5175784.620860833 -27313.57403115681))"
0,4,172.24268881162706,-43.47309899751564,172.17280352691546,-43.54739397531888,10.687797287418245,27.331460311201145,29.186033678675194,"POLYGON Z ((1525017.244397545 5183536.489309459 -29186.03367867519, 1533178.066755671 5178062.776121525 -27331.46031120115, 1538748.412536002 5186367.669130321 -27331.46031120115, 1530587.590177876 5191841.382318255 -29186.03367867519, 1525017.244397545 5183536.489309459 -29186.03367867519))"
0,5,172.15289485360287,-43.42000512957658,172.07440468929877,-43.48955601373996,12.304833921583548,29.237078193834066,31.3682063613206,"POLYGON Z ((1517545.043861509 5190526.516036782 -31368.2063613206, 1525157.79498145 5184402.439525212 -29237.07819383407, 1531425.86409622 5192194.185771881 -29237.07819383407, 1523813.112976279 5198318.262283451 -31368.2063613206, 1517545.043861509 5190526.516036782 -31368.2063613206))"
0,6,172.06300915691102,-43.36651675667496,171.97739225607305,-43.43139615156615,11.705865896797393,31.356078313909183,33.38495377744904,"POLYGON Z ((1510098.939728541 5197475.906666266 -33384.95377744904, 1517234.170973336 5190769.779659064 -31356.07831390918, 1524082.734093005 5198056.561060747 -31356.07831390918, 1516947.502848209 5204762.688067949 -33384.95377744904, 1510098.939728541 5197475.906666266 -33384.95377744904))"
1,0,172.64501897152118,-43.59954874059301,172.53382327497368,-43.639313969118454,16.25555174108543,26.795272837432112,29.5944932160583,"POLYGON Z ((1575631.355088312 5163949.442094599 -29594.4932160583, 1571348.981530503 5172541.627031113 -26795.27283743211, 1562399.000849219 5168080.926883756 -26795.27283743211, 1566681.374407027 5159488.741947242 -29594.4932160583, 1575631.355088312 5163949.442094599 -29594.4932160583))"
1,1,172.5637722710231,-43.543754598669,172.44640809376534,-43.572430195437214,8.880200993106621,25.34360676778234,26.887296565515864,"POLYGON Z ((1567961.189285342 5169360.087028075 -26887.29656551587, 1564758.921864104 5178706.878197843 -25343.60676778234, 1555298.733958873 5175465.760366336 -25343.60676778234, 1558501.001380111 5166118.969196567 -26887.29656551587, 1567961.189285342 5169360.087028075 -26887.29656551587))"
1,2,172.44220596867652,-43.477837653859055,172.51851406753119,-43.5487115943056,2.905294291172359,25.318439393304615,25.82529163668574,"POLYGON Z ((1553283.303250707 5171927.286143529 -25825.29163668574, 1561105.877210317 5178136.186001782 -25318.43939330462, 1554888.986645792 5185968.827427809 -25318.43939330462, 1547066.412686182 5179759.927569556 -25825.29163668574, 1553283.303250707 5171927.286143529 -25825.29163668574))"
1,3,172.42154835679807,-43.46135549825015,172.3664181339217,-43.54195812144478,7.037773144797519,25.69814411810224,26.923380803625093,"POLYGON Z ((1539897.567440849 5183162.438441813 -26923.38080362509, 1548813.928579623 5178803.849322911 -25698.14411810224, 1553205.606392431 5187787.899967721 -25698.14411810224, 1544289.245253657 5192146.489086622 -26923.38080362509, 1539897.567440849 5183162.438441813 -26923.38080362509))"
1,4,172.33277139382653,-43.4119492515352,172.2610776847743,-43.48528999219563,10.847676605186154,26.94588539932208,28.82787164265644,"POLYGON Z ((1532200.153713417 5190656.920243983 -28827.87164265644, 1540247.730808299 5185027.121785617 -26945.88539932208, 1545979.958511674 5193221.117487145 -26945.88539932208, 1537932.381416792 5198850.915945511 -28827.87164265644, 1532200.153713417 5190656.920243983 -28827.87164265644))"
1,5,172.242692657873,-43.35738849281896,172.16494794940513,-43.4273373346978,12.61516331423042,28.893903935266238,31.077919034165205,"POLYGON Z ((1524770.333541939 5197461.768866188 -31077.91903416521, 1532409.738425859 5191389.736993138 -28893.90393526624, 1538631.981492379 5199218.127071637 -28893.90393526624, 1530992.57660846 5205290.158944687 -31077.91903416521, 1524770.333541939 5197461.768866188 -31077.91903416521))"
1,6,172.15302850394602,-43.30235827895629,172.0707126372049,-43.369417424178536,12.192769409770285,31.15628950326498,33.268303975531644,"POLYGON Z ((1517361.787112922 5204186.25553481 -33268.30397553164, 1524710.480022173 5197741.404303443 -31156.28950326498, 1531304.065698559 5205259.690539558 -31156.28950326498, 1523955.372789308 5211704.541770926 -33268.30397553164, 1517361.787112922 5204186.25553481 -33268.30397553164))"
1,7,172.06310241360606,-43.25052114911484,171.97193373467607,-43.311105498077104,9.619402294399764,33.35437895826026,35.02540524676675,"POLYGON Z ((1509908.423387273 5211338.55820434 -35025.40524676675, 1516627.749436399 5204123.412426973 -33354.37895826026, 1523945.790478735 5210938.562851042 -33354.37895826026, 1517226.464429609 5218153.708628409 -35025.40524676675, 1509908.423387273 5211338.55820434 -35025.40524676675))"
1,8,171.9677832362838,-43.20879502529762,171.85744119000216,-43.248754914020964,6.463749772675945,34.953611461391944,36.07935718466277,"POLYGON Z ((1502722.849202487 5219773.281223033 -36079.35718466277, 1507248.093913103 5210927.103693977 -34953.61146139194, 1516150.863867949 5215481.298148664 -34953.61146139194, 1511625.619157332 5224327.475677719 -36079.35718466277, 1502722.849202487 5219773.281223033 -36079.35718466277))"
1,9,171.8706056648584,-43.1588406763909,171.75280548116186,-43.18478062962037,8.163253506464207,35.794783448666585,37.214724589681175,"POLYGON Z ((1495661.826712348 5227347.87531375 -37214.72458968117, 1498647.863983693 5217910.325389634 -35794.78344866659, 1508182.018711303 5220926.928384726 -35794.78344866659, 1505195.981439958 5230364.478308843 -37214.72458968117, 1495661.826712348 5227347.87531375 -37214.72458968117))"
1,10,171.78514584969986,-43.09006233469788,171.67422519796153,-43.128820064269775,15.553386466049785,36.85596818020717,39.53732959531796,"POLYGON Z ((1487885.379372857 5232658.512036685 -39537.32959531796, 1492163.65938722 5224026.79024551 -36855.96818020717, 1501123.480599545 5228467.691487733 -36855.96818020717, 1496845.200585181 5237099.413278908 -39537.32959531796, 1487885.379372857 5232658.512036685 -39537.32959531796))"
1,11,171.70018636063736,-43.02293702113887,171.59774188193896,-43.07254995279954,27.061683967322573,39.26701654116051,43.81651137795057,"POLYGON Z ((1480812.031700652 5237525.746518442 -43816.51137795057, 1485838.031442973 5230174.459330458 -39267.0165411605, 1494093.10703225 5235818.369944148 -39267.0165411605, 1489067.107289929 5243169.657132132 -43816.51137795057, 1480812.031700652 5237525.746518442 -43816.51137795057))"
1,12,171.6216914119655,-42.96704242849143,171.52273163875773,-43.020235158453694,36.49785918086159,43.880510447093855,49.82843795462334,"POLYGON Z ((1474770.060227811 5242283.518196537 -49828.43795462334, 1479628.866452266 5235879.288310098 -43880.51044709385, 1487595.524627854 5241923.488630516 -43880.51044709385, 1482736.718403399 5248327.718516955 -49828.43795462334, 1474770.060227811 5242283.518196537 -49828.43795462334))"
2,0,172.73940645104628,-43.53756452937407,172.62426912606702,-43.57066107147479,14.928246050752739,26.134533475945258,28.71062519928138,"POLYGON Z ((1582531.552607744 5170481.359248235 -28710.62519928138, 1578945.551588697 5179453.780778923 -26134.53347594526, 1569659.726005483 5175742.521796026 -26134.53347594526, 1573245.72702453 5166770.100265338 -28710.62519928138, 1582531.552607744 5170481.359248235 -28710.62519928138))"
2,1,172.66171469659787,-43.484309065661236,172.54028415216268,-43.50139779519755,7.976508895510293,24.829958113064578,26.217628935260592,"POLYGON Z ((1574570.545352194 5175631.504947481 -26217.62893526059, 1572644.462149786 5185345.647894062 -24829.95811306458, 1562835.417144776 5183400.747873575 -24829.95811306458, 1564761.500347184 5173686.604926994 -26217.62893526059, 1574570.545352194 5175631.504947481 -26217.62893526059))"
2,2,172.5480471021392,-43.41734130837748,172.60257122940806,-43.498150093509956,3.5127525175150494,24.82039956085725,25.433106523808725,"POLYGON Z ((1558934.038771543 5179338.933498902 -25433.10652380872, 1567869.143312485 5183787.359852117 -24820.39956085725, 1563412.343460942 5192739.283393083 -24820.39956085725, 1554477.238919999 5188290.857039868 -25433.10652380872, 1558934.038771543 5179338.933498902 -25433.10652380872))"
2,3,172.50885961053964,-43.39625111045,172.4570818809257,-43.478006540612846,7.576237730260184,25.25189169403127,26.570344616308496,"POLYGON Z ((1547066.155518288 5190055.885259462 -26570.3446163085, 1556092.184909223 5185958.022972156 -25251.89169403127, 1560226.13531996 5195063.540749942 -25251.89169403127, 1551200.105929025 5199161.403037247 -26570.3446163085, 1547066.155518288 5190055.885259462 -26570.3446163085))"
"""


class TestSubductionZoneFault(unittest.TestCase):

    def setUp(self):
        self.factory = FaultSubSectionFactory()

    def test_create_new_fault(self):
        sf = SheetFault("My First Subduction Zone")
        self.assertEqual(sf.name, "My First Subduction Zone")
        self.assertEqual(len(sf.sub_sections), 0)

    def test_load_sub_sections_from_csv(self):
        sf = SheetFault("9 part Subduction Zone")\
                .build_surface_from_csv(self.factory, StringIO(tile_param_csv))
        self.assertEqual(len(sf.sub_sections), 24)
        self.assertIsInstance(sf.sub_sections[0], FaultSubSection)

        # print(sf.sub_sections.values[-1])
        self.assertIs(sf, sf.sub_sections[0].parent)

    def test_load_sub_sections_from_invalid_csv_exception(self):
        with self.assertRaises((ValueError, IndexError)):
            SheetFault("24 part Subduction Zone")\
                .build_surface_from_csv(self.factory,
                                        StringIO('Sorry this is not csv_data'))


class TestFaultSubSection(unittest.TestCase):

    def setUp(self):
        self.factory = FaultSubSectionFactory()

        reader = csv.DictReader(StringIO(tile_param_csv))
        self.csvrows = [x for x in reader]

    def test_create_from_invalid_csvrow_exception(self):
        with self.assertRaises((KeyError,)):
            FaultSubSection.from_csv_row(self.factory,
                                         dict(x='Sorry this is not csv_data'))

    def test_create_from_csv_row(self):
        fss = FaultSubSection\
                .from_csv_row(self.factory, self.csvrows[0], parent=None)

        self.assertEqual(0, fss.id)
        self.assertAlmostEqual(-43.6606619468, fss.top_trace[0].x)
        self.assertAlmostEqual(172.550493842, fss.top_trace[0].y)

        self.assertEqual((0, 0), fss.strike_dip_index)
        self.assertAlmostEqual(17.190332526, fss.dip)

        self.assertAlmostEqual(27.77718083, fss.top_depth)
        self.assertAlmostEqual(30.73264945, fss.bottom_depth)


class TestGenerateRectangularRuptures(unittest.TestCase):

    def setUp(self):
        self.factory = FaultSubSectionFactory()
        self.sf = SheetFault("9 part Subduction Zone")\
            .build_surface_from_csv(self.factory, StringIO(tile_param_csv))

    # @unittest.skip("WIP")
    def test_rupture_one_by_one(self):
        shape_spec = dict(name="1 by 1", scale=1, aspect=1)
        ruptures = [r for r in self.sf.get_ruptures(shape_spec)]

        self.assertEqual(ruptures[0], [(0, 0)])
        self.assertEqual(ruptures[1], [(0, 1)])
        self.assertEqual(ruptures[7], [(1, 0)])
        self.assertEqual(ruptures[8], [(1, 1)])

    def test_rupture_one_by_two(self):
        shape_spec = dict(name="1 by 2", scale=1, aspect=2)
        ruptures = [r for r in self.sf.get_ruptures(shape_spec)]

        self.assertEqual(ruptures[0], [(0, 0), (1, 0)])     # begin col 0
        self.assertEqual(ruptures[1], [(0, 1), (1, 1)])

        self.assertEqual(ruptures[7], [(1, 0), (2, 0)])     # begin col 1
        self.assertEqual(ruptures[8], [(1, 1), (2, 1)])

    def test_rupture_two_by_one(self):
        shape_spec = dict(name="1 by 2", scale=2, aspect=0.5)
        ruptures = [r for r in self.sf.get_ruptures(shape_spec)]

        self.assertEqual(ruptures[0], [(0, 0), (0, 1)])     # begin col 0
        self.assertEqual(ruptures[5], [(0, 5), (0, 6)])

        self.assertEqual(ruptures[6], [(1, 0), (1, 1)])     # begin col 1
        self.assertEqual(ruptures[17], [(1, 11), (1, 12)])

        self.assertEqual(ruptures[-1], [(2, 2), (2, 3)])    # last

    def test_rupture_two_by_three(self):
        shape_spec = dict(name="2 by 3", scale=2, aspect=1.5)
        ruptures = [r for r in self.sf.get_ruptures(shape_spec)]

        self.assertEqual(ruptures[0], [(0, 0), (0, 1), (1, 0),
                                       (1, 1), (2, 0), (2, 1)])  # col 0

    def test_rupture_four_by_four(self):
        shape_spec = dict(name="4x4", scale=4, aspect=1, min_fill_factor=0.7)
        ruptures = [r for r in self.sf.get_ruptures(shape_spec)]

        self.assertEqual(ruptures[0], [
            (0, 0), (0, 1), (0, 2), (0, 3),
            (1, 0), (1, 1), (1, 2), (1, 3),
            (2, 0), (2, 1), (2, 2), (2, 3)])

    def test_rupture_offset_(self):
        shape_spec = dict(name="4 by 4", scale=4, aspect=1, min_fill_factor=0.55, interval=2)
        ruptures = [r for r in self.sf.get_ruptures(shape_spec)]

        self.assertEqual(ruptures[0], [
            (0, 0), (0, 1), (0, 2), (0, 3),
            (1, 0), (1, 1), (1, 2), (1, 3),
            (2, 0), (2, 1), (2, 2), (2, 3)])
        self.assertEqual(ruptures[1], [
            (0, 2), (0, 3), (0, 4), (0, 5),
            (1, 2), (1, 3), (1, 4), (1, 5),
            (2, 2), (2, 3)])
